[config]
skip_core_tasks = true

[env]
BUILDSYS_ARCH = { script = ["uname -m"] }
BUILDSYS_ROOT_DIR = "${CARGO_MAKE_WORKING_DIRECTORY}"
BUILDSYS_OUTPUT_DIR = "${BUILDSYS_ROOT_DIR}/build"
BUILDSYS_SOURCES_DIR = "${BUILDSYS_ROOT_DIR}/workspaces"
BUILDSYS_BUILDKIT_CLIENT = "moby/buildkit:v0.6.2"
BUILDSYS_BUILDKIT_SERVER = "tcp://127.0.0.1:1234"
BUILDSYS_TIMESTAMP = { script = ["date +%s"] }
BUILDSYS_VERSION = { script = ["git describe --tag --dirty || date +%Y%m%d"] }
CARGO_HOME = "${BUILDSYS_ROOT_DIR}/.cargo"
CARGO_MAKE_CARGO_ARGS = "--jobs 8 --offline --locked"
GO_MOD_CACHE = "${BUILDSYS_ROOT_DIR}/.gomodcache"

[env.development]
IMAGE = "aws-k8s"
BUILDSYS_ALLOW_UPSTREAM_SOURCE_URL = "true"

[tasks.setup]
script = [
'''
mkdir -p ${BUILDSYS_OUTPUT_DIR}
mkdir -p ${GO_MOD_CACHE}
'''
]

[tasks.fetch]
dependencies = ["setup"]
script = [
'''
for ws in workspaces packages images ; do
  cargo fetch --locked --manifest-path ${ws}/Cargo.toml
done
chmod o+r -R ${CARGO_HOME}

cd ${BUILDSYS_SOURCES_DIR}/host-ctr/cmd/host-ctr
docker run --rm \
  -e GOPRIVATE='*' \
  -e GOCACHE='/tmp/.cache' \
  --user $(id -u):$(id -g) \
  -v "${GO_MOD_CACHE}":/go/pkg/mod \
  -v "$PWD":/usr/src/host-ctr -w /usr/src/host-ctr \
  golang:1.12.5 /bin/bash -c "go list -mod=readonly ./... >/dev/null && go mod vendor"
'''
]

[tasks.build-packages]
dependencies = ["setup", "fetch"]
script = [
'''
cargo build \
  ${CARGO_BUILD_ARGS} \
  ${CARGO_MAKE_CARGO_ARGS} \
  --manifest-path packages/Cargo.toml \
  --all
'''
]

[tasks.world-packages]
dependencies = ["setup", "fetch"]
script = [
'''
cargo build \
  ${CARGO_BUILD_ARGS} \
  ${CARGO_MAKE_CARGO_ARGS} \
  --manifest-path packages/Cargo.toml \
  --all --all-features
'''
]

[tasks.build-images]
dependencies = ["build-packages"]
script = [
'''
cargo build \
  ${CARGO_BUILD_ARGS} \
  ${CARGO_MAKE_CARGO_ARGS} \
  --manifest-path images/Cargo.toml \
  --package ${IMAGE}
'''
]

[tasks.world-images]
dependencies = ["world-packages"]
script = [
'''
cargo build \
  ${CARGO_BUILD_ARGS} \
  ${CARGO_MAKE_CARGO_ARGS} \
  --manifest-path images/Cargo.toml \
  --package ${IMAGE}
'''
]

[tasks.check-licenses]
dependencies = ["fetch"]
script = [
'''
(cd workspaces && cargo deny check)
(cd tools/buildsys && cargo deny check)
'''
]

[tasks.link-clean]
dependencies = ["fetch"]
script = [
'''
for link in ${BUILDSYS_OUTPUT_DIR}/thar*.lz4; do
	if [ -L "${link}" ]; then
		rm ${link}
	fi
done
'''
]

[tasks.link-images]
script = [
'''
PREFIX="thar-${BUILDSYS_ARCH}-${IMAGE}-${BUILDSYS_VERSION}"
ln -s ${BUILDSYS_OUTPUT_DIR}/thar-${BUILDSYS_ARCH}.img.lz4 \
	${BUILDSYS_OUTPUT_DIR}/${PREFIX}.img.lz4
ln -s ${BUILDSYS_OUTPUT_DIR}/thar-${BUILDSYS_ARCH}-data.img.lz4 \
	${BUILDSYS_OUTPUT_DIR}/${PREFIX}-data.img.lz4
ln -s ${BUILDSYS_OUTPUT_DIR}/thar-${BUILDSYS_ARCH}-boot.ext4.lz4 \
	${BUILDSYS_OUTPUT_DIR}/${PREFIX}-boot.ext4.lz4
ln -s ${BUILDSYS_OUTPUT_DIR}/thar-${BUILDSYS_ARCH}-root.ext4.lz4 \
	${BUILDSYS_OUTPUT_DIR}/${PREFIX}-root.ext4.lz4
ln -s ${BUILDSYS_OUTPUT_DIR}/thar-${BUILDSYS_ARCH}-root.verity.lz4 \
	${BUILDSYS_OUTPUT_DIR}/${PREFIX}-root.verity.lz4
'''
]

[tasks.build]
dependencies = [
    "link-clean",
    "build-images",
    "check-licenses",
    "link-images",
]

[tasks.world]
dependencies = [
    "link-clean",
    "world-images",
    "check-licenses",
    "link-images",
]

[tasks.preview-docs]
script = ['tools/gen-docs.sh']

[tasks.clean]
script = [
'''
for ws in workspaces packages images ; do
  cargo clean --manifest-path ${ws}/Cargo.toml
done
for ext in rpm tar lz4 img ; do
  rm -f ${BUILDSYS_OUTPUT_DIR}/*.${ext}
done
rm -rf html
'''
]

[tasks.default]
alias = "build"
