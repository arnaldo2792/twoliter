[config]
skip_core_tasks = true

[env]
BUILDSYS_ARCH = { script = ["uname -m"] }
BUILDSYS_ROOT_DIR = "${CARGO_MAKE_WORKING_DIRECTORY}"
BUILDSYS_OUTPUT_DIR = "${BUILDSYS_ROOT_DIR}/build"
BUILDSYS_TOOLS_DIR = "${BUILDSYS_ROOT_DIR}/tools"
BUILDSYS_SOURCES_DIR = "${BUILDSYS_ROOT_DIR}/workspaces"
BUILDSYS_TIMESTAMP = { script = ["date +%s"] }
BUILDSYS_VERSION = { script = ["git describe --tag --dirty || date +%Y%m%d"] }
BUILDSYS_VARIANT = "aws-k8s"

CARGO_HOME = "${BUILDSYS_ROOT_DIR}/.cargo"
CARGO_MAKE_CARGO_ARGS = "--jobs 8 --offline --locked"
GO_MOD_CACHE = "${BUILDSYS_ROOT_DIR}/.gomodcache"
GO_VERSION = "1.12.5"
DOCKER_BUILDKIT = "1"

[env.development]
# Defined here to allow us to override ${BUILDSYS_ARCH} on the command line.
BUILDSYS_SDK_IMAGE = "thar/sdk-${BUILDSYS_ARCH}:v0.4"
# Permit pulling directly Upstream URLs when lookaside cache results in MISSes.
BUILDSYS_ALLOW_UPSTREAM_SOURCE_URL = "true"
# Extra flags used when spawning containers.
#
# ex: BUILDSYS_DOCKER_RUN_ARGS="--network=host --dns=127.0.0.53"
#
BUILDSYS_DOCKER_RUN_ARGS = { default_value = "--network=host" }

[tasks.setup]
script = [
'''
mkdir -p ${BUILDSYS_OUTPUT_DIR}
mkdir -p ${GO_MOD_CACHE}

for cmd in bash curl docker gunzip ; do
  if ! command -v ${cmd} >/dev/null 2>&1 ; then
    echo "required program '${cmd}' not found" >&2
    exit 1
  fi
done
'''
]

[tasks.fetch]
dependencies = [
  "fetch-sdk",
  "fetch-workspaces",
  "fetch-vendored",
]

[tasks.fetch-sdk]
dependencies = ["setup"]
script_runner = "bash"
script = [
'''
set -o pipefail
if ! docker image inspect ${BUILDSYS_SDK_IMAGE} >/dev/null 2>&1 ; then
  # Let curl resolve the certificates instead of the tasks resolved bundle.
  unset SSL_CERT_FILE SSL_CERT_DIR
  if ! curl https://thar-upstream-lookaside-cache.s3.us-west-2.amazonaws.com/${BUILDSYS_SDK_IMAGE}.tar.gz \
       | gunzip | docker load ; then
    echo "failed to load '${BUILDSYS_SDK_IMAGE}'" >&2
    exit 1
  fi
fi
'''
]

[tasks.fetch-workspaces]
dependencies = ["setup"]
script = [
'''
for ws in workspaces packages variants tools/buildsys ; do
  cargo fetch --locked --manifest-path ${ws}/Cargo.toml
done
chmod o+r -R ${CARGO_HOME}
'''
]

[tasks.fetch-vendored]
dependencies = ["setup"]
script = [
'''
${BUILDSYS_TOOLS_DIR}/docker-go \
  --module-path ${BUILDSYS_SOURCES_DIR}/host-ctr/cmd/host-ctr \
  --go-version ${GO_VERSION} \
  --go-mod-cache ${GO_MOD_CACHE} \
  --command "go list -mod=readonly ./... >/dev/null && go mod vendor"
'''
]

[tasks.unit-tests]
dependencies = ["setup", "fetch-workspaces", "fetch-vendored"]
script = [
'''
cargo test \
  ${CARGO_BUILD_ARGS} \
  ${CARGO_MAKE_CARGO_ARGS} \
  --manifest-path ${BUILDSYS_SOURCES_DIR}/Cargo.toml \
  --all

# host-ctr unit tests (go)
${BUILDSYS_TOOLS_DIR}/docker-go \
  --module-path ${BUILDSYS_SOURCES_DIR}/host-ctr/cmd/host-ctr \
  --go-version ${GO_VERSION} \
  --go-mod-cache ${GO_MOD_CACHE} \
  --command "go test -v"
'''
]

[tasks.build-tools]
dependencies = ["setup", "fetch"]
script = [
'''
cargo install \
  ${CARGO_MAKE_CARGO_ARGS} \
  --path tools/buildsys \
  --root tools \
  --force \
  --quiet
'''
]

[tasks.build-packages]
dependencies = ["build-tools"]
script = [
'''
export PATH="${BUILDSYS_TOOLS_DIR}/bin:${PATH}"
cargo build \
  ${CARGO_BUILD_ARGS} \
  ${CARGO_MAKE_CARGO_ARGS} \
  --manifest-path packages/Cargo.toml \
  --all
'''
]

[tasks.build-variant]
dependencies = ["build-packages"]
script = [
'''
export PATH="${BUILDSYS_TOOLS_DIR}/bin:${PATH}"
cargo build \
  ${CARGO_BUILD_ARGS} \
  ${CARGO_MAKE_CARGO_ARGS} \
  --manifest-path variants/Cargo.toml \
  --package ${BUILDSYS_VARIANT}
'''
]

[tasks.world-packages]
alias = "build-packages"

[tasks.world-variant]
alias = "build-variant"

[tasks.check-licenses]
dependencies = ["fetch"]
script = [
'''
(cd workspaces && cargo deny check)
(cd tools/buildsys && cargo deny check)
(cd extras/sdk-container/license-scan && cargo deny check)
'''
]

[tasks.link-clean]
dependencies = ["fetch"]
script = [
'''
PREFIX="thar-${BUILDSYS_ARCH}-${BUILDSYS_VARIANT}"
for link in ${BUILDSYS_OUTPUT_DIR}/${PREFIX}-*.lz4; do
  if [ -L "${link}" ]; then
    rm ${link}
  fi
done
'''
]

[tasks.link-variant]
script = [
'''
PREFIX="thar-${BUILDSYS_ARCH}-${BUILDSYS_VARIANT}"
VERSIONED="${PREFIX}-${BUILDSYS_VERSION}"
ln -snf ${BUILDSYS_OUTPUT_DIR}/${PREFIX}.img.lz4 \
  ${BUILDSYS_OUTPUT_DIR}/${VERSIONED}.img.lz4
ln -snf ${BUILDSYS_OUTPUT_DIR}/${PREFIX}-data.img.lz4 \
  ${BUILDSYS_OUTPUT_DIR}/${VERSIONED}-data.img.lz4
ln -snf ${BUILDSYS_OUTPUT_DIR}/${PREFIX}-boot.ext4.lz4 \
  ${BUILDSYS_OUTPUT_DIR}/${VERSIONED}-boot.ext4.lz4
ln -snf ${BUILDSYS_OUTPUT_DIR}/${PREFIX}-root.ext4.lz4 \
  ${BUILDSYS_OUTPUT_DIR}/${VERSIONED}-root.ext4.lz4
ln -snf ${BUILDSYS_OUTPUT_DIR}/${PREFIX}-root.verity.lz4 \
  ${BUILDSYS_OUTPUT_DIR}/${VERSIONED}-root.verity.lz4
'''
]

[tasks.build]
dependencies = [
    "link-clean",
    "build-variant",
    "check-licenses",
    "link-variant",
]

[tasks.world]
alias = "build"

[tasks.preview-docs]
script = ['tools/gen-docs.sh']

[tasks.clean]
script = [
'''
for ws in workspaces packages variants tools/buildsys ; do
  cargo clean --manifest-path ${ws}/Cargo.toml
done
rm -f ${BUILDSYS_TOOLS_DIR}/bin/buildsys
for ext in rpm tar lz4 img ; do
  rm -f ${BUILDSYS_OUTPUT_DIR}/*.${ext}
done
rm -rf html
'''
]

[tasks.default]
alias = "build"
